name: "Continuous Integration - Dotnet"

permissions:
  contents: read
  id-token: write
  pull-requests: write
  actions: write
  packages: write

on:
  workflow_call:
    inputs:
      settings-file:
        description: "Path to the settings file"
        required: false
        type: string
        default: "settings.yml"
      runs-on:
        description: "The type of runner that the job will run on"
        required: false
        type: string
        default: "ubuntu-latest"

jobs:
    ci-image:
        runs-on: ${{ inputs.runs-on }}
        steps:
            - uses: actions/checkout@v4

            - name: Run YAML to Github Output Action
              id: settings-parser
              uses: christian-ci/action-yaml-github-output@v2
              with:
                file_path: './${{ inputs.settings-file }}'

            - name: Setup dotnet
              uses: actions/setup-dotnet@v4
              with:
                dotnet-version: | 
                    6.0.x
                    9.0.x
            
            - name: Restore dependencies
              run: dotnet restore

            - name: Build project
              run: dotnet build --no-restore

            - name: Run tests
              run: dotnet test --no-build --logger trx --results-directory "TestResults-${{ steps.settings-parser.outputs.project-name }}"

            - name: Upload dotnet test results
              uses: actions/upload-artifact@v4
              with:
                name: dotnet-results-${{ steps.settings-parser.outputs.project-name }}
                path: TestResults-${{ steps.settings-parser.outputs.project-name }}
            # Use always() to always run this step to publish test results when there are test failures
              if: ${{ always() }}
    open-pr:
        runs-on: ${{ inputs.runs-on }}
        needs: ci-image
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Create PR
              uses: vsoch/create-pull-request@master
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                PULL_REQUEST_BRANCH: main
            

